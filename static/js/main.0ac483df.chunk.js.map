{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchCard.js","Components/Scroll.js","Container/App.js","action.js","constant.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","Cardcomponent","robots","map","user","i","key","employee_name","employee_salary","SearchCard","searchText","onSearchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","this","onRequestRobot","searchField","onSearchedChange","isPending","robotFilter","filter","toLowerCase","includes","React","Component","connect","state","searchRobot","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobot","loggered","logger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.0ac483df.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Card = (props) =>{\r\n\tconst { name , email, id }=props;\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n\t\t<img alt='ROBOT' src={`https://robohash.org/${id}?100Ã—100`}  />\r\n\t\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst Cardcomponent = robots.map((user,i)=>{\r\n\t\treturn (<Card\r\n\t\t\tkey={i}\r\n\t\t\tid={user.id}\r\n\t\t\tname={user.employee_name}\r\n\t\t\temail={user.employee_salary}\r\n\t\t\t/>\r\n\t\t\t);\r\n\t})\r\n\treturn (\r\n\t\t<div>\r\n\t{Cardcomponent}\r\n   </div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react'\r\n\r\n\r\nconst SearchCard = ({searchText,onSearchChange}) =>{\r\n  return (\r\n    <div className=' pd2'>\r\n    <input\r\n    className='pa3 ba b--green bg-lightest-blue'\r\n    type='search'\r\n    placeholder='Please type your robot'\r\n    onChange={onSearchChange}\r\n    />\r\n    </div>\r\n  )\r\n}\r\nexport default SearchCard;\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflow: 'scroll', border: '5px solid black', height:'500px'}}>\r\n    {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport CardList from '../Components/CardList'\nimport SearchCard from '../Components/SearchCard'\nimport Scroll from '../Components/Scroll'\nimport 'tachyons';\nimport { setSearchField, requestRobot } from '../action.js'\n\nconst mapStateToProps = (state) => {\n  return {\n    //searchField:state.searchRobot.searchField //(it can be like this but i will keep defining state path)\n    searchField: state.searchRobot.searchField,  //better like this, so i won't define state path\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n    error: state.requestRobots.error\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    onSearchedChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobot: () => dispatch(requestRobot())\n  }\n}\nclass App extends React.Component {\n  /*\n  constructor(){\n    super()\n    this.state= {\n      robots:[]\n    }\n  }\nThis wont br needed because we using redux to get state\n  */\n   componentDidMount(){\n    /*\n     fetch('http://dummy.restapiexample.com/api/v1/employees')\n     .then(response => {\n       return response.json();\n     })\n     .then(user => {\n        this.setState({robots:user.data});\n     })*/\n     this.props.onRequestRobot();\n\n   }\n  render(){\n    const { searchField, onSearchedChange, robots, isPending}=this.props;\n    const robotFilter = robots.filter(robots =>{\n    return robots.employee_name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n     <h1>Loading</h1> :\n    (\n      <div className='tc'>\n      <h1 className='f1'>RoboFriends</h1>\n      <SearchCard onSearchChange={onSearchedChange}/>\n      <Scroll>\n<CardList robots={robotFilter}/>\n      </Scroll>\n   </div>\n  );\n  }\n\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","import { \r\n\tCHANGE_SEARCH_FIELDS,\r\n\tREQUEST_ROBOT_PENDING,\r\n\tREQUEST_ROBOT_SUCCESS,\r\n\tREQUEST_ROBOT_FAILED\r\n} from './constant.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\t\ttype: CHANGE_SEARCH_FIELDS,\r\n  \t\tpayload: text\r\n\t})\r\n\r\nexport const requestRobot = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOT_PENDING });\r\n\tfetch('http://dummy.restapiexample.com/api/v1/employees')\r\n     .then(response => response.json())\r\n     .then(data => dispatch({type: REQUEST_ROBOT_SUCCESS, payload: data.data}))\r\n     .catch(error => dispatch({type: REQUEST_ROBOT_FAILED, payload: error}))\r\n}\r\n","export const CHANGE_SEARCH_FIELDS = 'CHANGE_SEARCH_FIELDS';\r\n\r\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING';\r\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS';\r\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n\tCHANGE_SEARCH_FIELDS,\r\n\tREQUEST_ROBOT_PENDING,\r\n\tREQUEST_ROBOT_SUCCESS,\r\n\tREQUEST_ROBOT_FAILED\r\n} from './constant.js';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobot = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELDS:\r\n      return Object.assign({}, state , {searchField: action.payload}); //having error\r\n      //return {...state,searchField: action.payload}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobot = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n} \r\n\r\nexport const requestRobots = (state=initialStateRobot, action={}) => {\r\n  switch(action.type) {\r\n  \tcase REQUEST_ROBOT_PENDING:\r\n  \t\treturn Object.assign({}, state , {isPending: true});\r\n  \tcase REQUEST_ROBOT_SUCCESS:\r\n  \t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\r\n  \tcase REQUEST_ROBOT_FAILED:\r\n  \t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\r\n  \tdefault:\r\n      \treturn state;\r\n  \t}\r\n  }\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware,combineReducers } from 'redux';\nimport { logger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobot, requestRobots } from './reducer'\n\nconst loggered = logger;\nconst rootReducer=combineReducers({searchRobot, requestRobots})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware, loggered));\n//wrap with provider because of easy pass down of stored state.\nReactDOM.render(\n <Provider store={store}>\n    <App />\n</Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}